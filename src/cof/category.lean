import cof.basic
import cof.valley

-- In these files we define the concept of localizing a category at a
-- (left) multiplicative system.
-- The presence of conditions defining a multiplicative system mean
-- that the resulting category is much easier to work with than
-- localization through the path category.
-- See Stacks Project [Tag 04VB]

noncomputable theory

namespace category_theory

namespace derived

universe u

variables {C : Type u} [small_category C] {S : morphism_property C}
variables {M : left_mult_sys S}

-- Define the identity and composition of valleys

def id_valley (X : left_calculus C M) : valley X X :=
{ obj := X,
  f   := ùüô X.as,
  s   := ùüô X.as,
  qis := M.id }

structure ore_data {X Y Z : C} := 
  (W  : C)
  (f‚ÇÅ : X ‚ü∂ Y) 
  (s‚ÇÅ : X ‚ü∂ Z) 
  (s‚ÇÇ : Y ‚ü∂ W) 
  (f‚ÇÇ : Z ‚ü∂ W)
  (hs : (S s‚ÇÅ ‚àß S s‚ÇÇ))
  (comm : (s‚ÇÅ ‚â´ f‚ÇÇ) = (f‚ÇÅ ‚â´ s‚ÇÇ))

structure comp_data {X Y Z : left_calculus C M} (v‚ÇÅ : valley X Y) (v‚ÇÇ : valley Y Z) :=
  (W    : C) 
  (h    : v‚ÇÅ.obj.as ‚ü∂ W) 
  (u    : v‚ÇÇ.obj.as ‚ü∂ W) 
  (hu   : S u)
  (comm : v‚ÇÇ.f ‚â´ u = v‚ÇÅ.s ‚â´ h)

-- The Ore condition gives us composition data automatically
def data_from_ore {X Y Z : left_calculus C M} {v‚ÇÅ : valley X Y} {v‚ÇÇ : valley Y Z} : comp_data v‚ÇÅ v‚ÇÇ :=
let Y' := v‚ÇÅ.obj, Z' := v‚ÇÇ.obj in
  have hyp : _ :=
    M.ore v‚ÇÇ.f v‚ÇÅ.s v‚ÇÅ.qis,
  let Z'' := classical.some hyp in
  have hyp‚ÇÅ : ‚àÉ (f : Y'.as ‚ü∂ Z'') (s : Z'.as ‚ü∂ Z''), S s ‚àß v‚ÇÇ.f ‚â´ s = v‚ÇÅ.s ‚â´ f := 
    classical.some_spec hyp,
  let h := classical.some hyp‚ÇÅ in
  have hyp‚ÇÇ : ‚àÉ (s : Z'.as ‚ü∂ Z''), S s ‚àß v‚ÇÇ.f ‚â´ s = v‚ÇÅ.s ‚â´ h := 
    classical.some_spec hyp‚ÇÅ,
  let u := classical.some hyp‚ÇÇ in
  have hyp‚ÇÉ : S u ‚àß v‚ÇÇ.f ‚â´ u = v‚ÇÅ.s ‚â´ h := (classical.some_spec hyp‚ÇÇ),
  { W    := Z'',
    h    := h,
    u    := u,
    hu   := hyp‚ÇÉ.left,
    comm := hyp‚ÇÉ.right }

def comp_valley_from_data {X Y Z : left_calculus C M} 
    (v‚ÇÅ : valley X Y) (v‚ÇÇ : valley Y Z) (data : comp_data v‚ÇÅ v‚ÇÇ)
  : valley X Z :=
  { obj := ‚ü® data.W ‚ü©,
    f   := v‚ÇÅ.f ‚â´ data.h,
    s   := v‚ÇÇ.s ‚â´ data.u,
    qis := M.comp ‚ü®v‚ÇÇ.qis, data.hu‚ü© }

lemma comp_valley_obj {X Y Z : left_calculus C M} 
    (v‚ÇÅ : valley X Y) (v‚ÇÇ : valley Y Z) (data : comp_data v‚ÇÅ v‚ÇÇ)
  : (comp_valley_from_data v‚ÇÅ v‚ÇÇ data).obj.as = data.W := rfl

-- As a default, we can always define composition using the Ore data
def comp_valley {X Y Z : left_calculus C M} (v‚ÇÅ : valley X Y) (v‚ÇÇ : valley Y Z) : valley X Z :=
  comp_valley_from_data v‚ÇÅ v‚ÇÇ data_from_ore

-- Composition is well defined under the equivalence relation
lemma comp_independent_of_data' {X Y Z : left_calculus C M} (v‚ÇÅ : valley X Y) (v‚ÇÇ : valley Y Z) (d‚ÇÅ d‚ÇÇ : comp_data v‚ÇÅ v‚ÇÇ) :
  ‚ü¶ comp_valley_from_data v‚ÇÅ v‚ÇÇ d‚ÇÅ ‚üß = ‚ü¶ comp_valley_from_data v‚ÇÅ v‚ÇÇ d‚ÇÇ ‚üß  :=
let c‚ÇÅ := comp_valley_from_data v‚ÇÅ v‚ÇÇ d‚ÇÅ, c‚ÇÇ := comp_valley_from_data v‚ÇÅ v‚ÇÇ d‚ÇÇ in
match M.ore d‚ÇÇ.u d‚ÇÅ.u d‚ÇÅ.hu with ‚ü®W, h', u', hu', hc‚ü© := 
  begin
    have h‚ÇÅ : _, by calc
      v‚ÇÅ.s ‚â´ d‚ÇÇ.h ‚â´ u' = (v‚ÇÇ.f ‚â´ d‚ÇÇ.u) ‚â´ u' : by rw [‚Üêcategory.assoc, d‚ÇÇ.comm]
      ... = v‚ÇÇ.f ‚â´ (d‚ÇÅ.u ‚â´ h') : by rw [category.assoc, hc]
      ... = v‚ÇÅ.s ‚â´ d‚ÇÅ.h ‚â´ h' : by {rw [‚Üêcategory.assoc, d‚ÇÅ.comm], simp},
    have h‚ÇÇ : _, from M.cancel ‚ü®v‚ÇÅ.qis, h‚ÇÅ‚ü©,
    rcases h‚ÇÇ with ‚ü®Z', s', hs', hc'‚ü©,

    let h'' := h' ‚â´ s',
    let u'' := u' ‚â´ s',
    have h‚ÇÇ : d‚ÇÇ.h ‚â´ u'' = d‚ÇÅ.h ‚â´ h'', by rw [‚Üêcategory.assoc, hc', category.assoc],
    have h‚ÇÉ : d‚ÇÇ.u ‚â´ u'' = d‚ÇÅ.u ‚â´ h'', by rw [‚Üêcategory.assoc, hc, category.assoc],
    have hu'' : S u'', from M.comp ‚ü®hu', hs'‚ü©,

    apply quotient.eq.mpr,
    
    let v : valley X Z := {
      obj := {as := Z'},
      f   := v‚ÇÅ.f ‚â´ d‚ÇÇ.h ‚â´ u'',
      s   := v‚ÇÇ.s ‚â´ d‚ÇÇ.u ‚â´ u'',
      qis := triple_comp M ‚ü®v‚ÇÇ.qis, d‚ÇÇ.hu, hu''‚ü©,
    },
    use [v, h'', u''],

    simp, split,
    have hlemma : c‚ÇÅ.f = (v‚ÇÅ.f ‚â´ d‚ÇÅ.h), by refl, 
    rw [hlemma, h‚ÇÇ], simp,

    split,
    have hlemma : c‚ÇÅ.s = (v‚ÇÇ.s ‚â´ d‚ÇÅ.u), by refl,
    rw [hlemma, h‚ÇÉ], simp,

    split,
    have hlemma : c‚ÇÇ.f = (v‚ÇÅ.f ‚â´ d‚ÇÇ.h), by refl,
    rw hlemma, simp,

    have hlemma : c‚ÇÇ.s = (v‚ÇÇ.s ‚â´ d‚ÇÇ.u), by refl,
    rw hlemma, simp,
  end
end


lemma comp_independent_of_data {X Y Z : left_calculus C M} (v‚ÇÅ : valley X Y) (v‚ÇÇ : valley Y Z) (d : comp_data v‚ÇÅ v‚ÇÇ) :
  ‚ü¶ comp_valley v‚ÇÅ v‚ÇÇ ‚üß = ‚ü¶ comp_valley_from_data v‚ÇÅ v‚ÇÇ d ‚üß  :=
comp_independent_of_data' v‚ÇÅ v‚ÇÇ data_from_ore d

lemma dom_imp_post_comp {X Y Z : left_calculus C M} (v‚ÇÅ v‚ÇÇ : valley X Y) (w : valley Y Z) (dom : v‚ÇÅ E v‚ÇÇ) : 
  ‚ü¶ comp_valley v‚ÇÅ w ‚üß = ‚ü¶ comp_valley v‚ÇÇ w ‚üß :=
begin
  rcases dom with ‚ü®a, ha‚ÇÅ, ha‚ÇÇ‚ü©,

  let g := w.f,
  have hore : _ := M.ore g v‚ÇÇ.s v‚ÇÇ.qis,
  rcases hore with ‚ü®Z'', h, u, hu, hcomm‚ü©,

  have hcomm' : g ‚â´ u = v‚ÇÅ.s ‚â´ a ‚â´ h, by rw [‚Üêcategory.assoc, ha‚ÇÇ, hcomm],
  let d‚ÇÅ : comp_data v‚ÇÅ w := {
    W := Z'',
    h := a ‚â´ h,
    u := u,
    hu := hu,
    comm := hcomm',
  },
  let d‚ÇÇ : comp_data v‚ÇÇ w := {
    W := Z'',
    h := h,
    u := u,
    hu := hu,
    comm := hcomm,
  },
  have hcomp‚ÇÅ : _ := comp_independent_of_data v‚ÇÅ w d‚ÇÅ,
  have hcomp‚ÇÇ : _ := comp_independent_of_data v‚ÇÇ w d‚ÇÇ,

  let c‚ÇÅ := comp_valley_from_data v‚ÇÅ w d‚ÇÅ,
  let c‚ÇÇ := comp_valley_from_data v‚ÇÇ w d‚ÇÇ,
  suffices heq : ‚ü¶ c‚ÇÅ ‚üß = ‚ü¶ c‚ÇÇ ‚üß, by rw [hcomp‚ÇÅ, hcomp‚ÇÇ, heq],

  suffices heq' : veq X Z c‚ÇÅ c‚ÇÇ, by {apply quotient.eq.mpr, exact heq'},
  
  use [Z'', c‚ÇÅ.f, c‚ÇÇ.s, c‚ÇÇ.qis, ùüô Z'', ùüô Z''],
  simp,
  -- idk why we need this, but simp can't seem to take care of it
  -- otherwise.
  have hlemma : ‚àÄ {X : C}, ‚àÄ f : X ‚ü∂ Z'', f ‚â´ ùüô Z'' = f, by {intro f, simp},
  split, exact hlemma c‚ÇÅ.f, rw [hlemma c‚ÇÅ.s],
  split, refl, 
  split, rw [hlemma c‚ÇÇ.f],

  have hc‚ÇÅ : c‚ÇÅ.f = v‚ÇÅ.f ‚â´ a ‚â´ h, by refl, rw hc‚ÇÅ,
  have hc‚ÇÇ : c‚ÇÇ.f = v‚ÇÇ.f ‚â´ h, by refl, rw hc‚ÇÇ,
  rw [‚Üêcategory.assoc, ha‚ÇÅ],
  rw hlemma c‚ÇÇ.s,
end


lemma dom_imp_pre_comp {X Y Z : left_calculus C M} (v‚ÇÅ v‚ÇÇ : valley X Y) (w: valley Z X) (dom : v‚ÇÅ E v‚ÇÇ) : 
  ‚ü¶ comp_valley w v‚ÇÅ ‚üß = ‚ü¶ comp_valley w v‚ÇÇ ‚üß :=
begin
  rcases dom with ‚ü®a, ha‚ÇÅ, ha‚ÇÇ‚ü©,

  have hore‚ÇÅ : _ := M.ore v‚ÇÅ.f w.s w.qis,
  rcases hore‚ÇÅ with ‚ü®Z‚ÇÅ, h‚ÇÅ, t‚ÇÅ, ht‚ÇÅ, hcomm‚ÇÅ‚ü©,
  have hore‚ÇÇ : _ := M.ore a t‚ÇÅ ht‚ÇÅ,
  rcases hore‚ÇÇ with ‚ü®Z‚ÇÇ, h‚ÇÇ, t‚ÇÇ, ht‚ÇÇ, hcomm‚ÇÇ‚ü©,

  let d‚ÇÅ : comp_data w v‚ÇÅ := {
    W := Z‚ÇÅ,
    h := h‚ÇÅ,
    u := t‚ÇÅ,
    hu := ht‚ÇÅ,
    comm := hcomm‚ÇÅ,
  },

  have hcomm' : v‚ÇÇ.f ‚â´ t‚ÇÇ = w.s ‚â´ h‚ÇÅ ‚â´ h‚ÇÇ, by
    {rw [‚Üêha‚ÇÅ, category.assoc, hcomm‚ÇÇ, ‚Üêcategory.assoc, hcomm‚ÇÅ], simp},
  let d‚ÇÇ : comp_data w v‚ÇÇ := {
    W := Z‚ÇÇ,
    h := h‚ÇÅ ‚â´ h‚ÇÇ,
    u := t‚ÇÇ,
    hu := ht‚ÇÇ,
    comm := hcomm',
  },

  have hcomp‚ÇÅ : _ := comp_independent_of_data w v‚ÇÅ d‚ÇÅ,
  have hcomp‚ÇÇ : _ := comp_independent_of_data w v‚ÇÇ d‚ÇÇ,

  let c‚ÇÅ := comp_valley_from_data w v‚ÇÅ d‚ÇÅ,
  let c‚ÇÇ := comp_valley_from_data w v‚ÇÇ d‚ÇÇ,
  suffices heq : ‚ü¶ c‚ÇÅ ‚üß = ‚ü¶ c‚ÇÇ ‚üß, by rw [hcomp‚ÇÅ, hcomp‚ÇÇ, heq],
  suffices heq' : veq Z Y c‚ÇÅ c‚ÇÇ, by {apply quotient.eq.mpr, exact heq'},

  use [c‚ÇÇ, h‚ÇÇ, ùüô Z‚ÇÇ],  
  split, 
  { have hlemma‚ÇÅ : c‚ÇÅ.f = w.f ‚â´ h‚ÇÅ, by refl,
    rw hlemma‚ÇÅ, simp,
    have hlemma‚ÇÇ : c‚ÇÇ.f = w.f ‚â´ (h‚ÇÅ ‚â´ h‚ÇÇ), by refl,
    rw hlemma‚ÇÇ },
  split, 
  { have hlemma‚ÇÅ : c‚ÇÅ.s = v‚ÇÅ.s ‚â´ t‚ÇÅ, by refl, 
    have hlemma‚ÇÇ : c‚ÇÇ.s = v‚ÇÇ.s ‚â´ t‚ÇÇ, by refl,
    rw [hlemma‚ÇÅ, hlemma‚ÇÇ], simp, rw [‚Üêhcomm‚ÇÇ, ‚Üêcategory.assoc, ha‚ÇÇ] },
   
  have hlemma : ‚àÄ {X : C}, ‚àÄ f : X ‚ü∂ Z‚ÇÇ, f ‚â´ ùüô Z‚ÇÇ = f, by {intro f, simp},
  split,
  rw hlemma c‚ÇÇ.f,
  rw hlemma c‚ÇÇ.s,
end

lemma comp_well_def {X Y Z : left_calculus C M}  (v‚ÇÅ v‚ÇÅ' : valley X Y) (v‚ÇÇ v‚ÇÇ' : valley Y Z) :
  ‚ü¶ v‚ÇÅ ‚üß = ‚ü¶ v‚ÇÅ' ‚üß ‚àß ‚ü¶ v‚ÇÇ ‚üß = ‚ü¶ v‚ÇÇ' ‚üß ‚Üí ‚ü¶ comp_valley v‚ÇÅ v‚ÇÇ ‚üß = ‚ü¶ comp_valley v‚ÇÅ' v‚ÇÇ' ‚üß := 
begin
  rintro ‚ü® h‚ÇÅ, h‚ÇÇ ‚ü©,
  have h‚ÇÅ' : _ := quotient.eq.mp h‚ÇÅ,
  have h‚ÇÇ' : _ := quotient.eq.mp h‚ÇÇ,
  
  show ‚ü¶ comp_valley v‚ÇÅ v‚ÇÇ ‚üß = ‚ü¶ comp_valley v‚ÇÅ' v‚ÇÇ' ‚üß,

  have dom‚ÇÅ : _ := (dom_iff_equiv _ _).mpr h‚ÇÅ',
  have dom‚ÇÇ : _ := (dom_iff_equiv _ _).mpr h‚ÇÇ',

  rcases dom‚ÇÅ with ‚ü®w‚ÇÅ, dv‚ÇÅ, dv‚ÇÅ'‚ü©,
  rcases dom‚ÇÇ with ‚ü®w‚ÇÇ, dv‚ÇÇ, dv‚ÇÇ'‚ü©,
  
  have heq‚ÇÅ : ‚ü¶ comp_valley v‚ÇÅ v‚ÇÇ ‚üß = ‚ü¶ comp_valley w‚ÇÅ w‚ÇÇ ‚üß,
  by calc
    ‚ü¶ comp_valley v‚ÇÅ v‚ÇÇ ‚üß 
        = ‚ü¶ comp_valley w‚ÇÅ v‚ÇÇ ‚üß : by { apply (dom_imp_post_comp _ _ _ dv‚ÇÅ)}
    ... = ‚ü¶ comp_valley w‚ÇÅ w‚ÇÇ ‚üß : by { apply (dom_imp_pre_comp  _ _ _ dv‚ÇÇ)},
  
  have heq‚ÇÇ : ‚ü¶ comp_valley v‚ÇÅ' v‚ÇÇ' ‚üß = ‚ü¶ comp_valley w‚ÇÅ w‚ÇÇ ‚üß,
  by calc
    ‚ü¶ comp_valley v‚ÇÅ' v‚ÇÇ' ‚üß
        = ‚ü¶ comp_valley w‚ÇÅ v‚ÇÇ' ‚üß : by { apply (dom_imp_post_comp _ _ _ dv‚ÇÅ')}
    ... = ‚ü¶ comp_valley w‚ÇÅ w‚ÇÇ ‚üß  : by { apply (dom_imp_pre_comp  _ _ _ dv‚ÇÇ')},
  
  rw [heq‚ÇÅ, heq‚ÇÇ],
end

-- The axioms for the category

def hom_type (X Y : left_calculus C M) := quotient (valley_setoid X Y)

def id (X : left_calculus C M) := ‚ü¶ id_valley X ‚üß

def comp {X Y Z : left_calculus C M} (f : hom_type X Y) (g : hom_type Y Z) := 
  ‚ü¶ comp_valley (quotient.out f) (quotient.out g) ‚üß

lemma id_comp' (X Y : left_calculus C M) (f :hom_type X Y) :
  comp (id X) f = f :=
let g  := comp (id X) f,
    f' := f.out,
    data : comp_data (id_valley X) f' :=
      { W := f'.obj.as,
        h := f'.f,
        u := (ùüô f'.obj.as),
        hu := M.id,
        comm := have h : (id_valley X).s = ùüô X.as, from rfl,
          by {simp, rw h, simp},
      },
    g' := comp_valley_from_data (id_valley X) f.out data in
begin
  suffices hlift : veq X Y g.out f', from begin
      apply quotient.out_equiv_out.mp,
      exact hlift,
    end,
  have h‚ÇÅ : veq X Y g.out g', from begin
      suffices heq : g = ‚ü¶g'‚üß, from begin 
        have hout : veq X Y g.out (‚ü¶g'‚üß.out), from quotient.out_equiv_out.mpr heq,
        have hout' : veq X Y ‚ü¶g'‚üß.out g', from quotient.mk_out g',
        exact valley_equiv_trans X Y hout hout',
      end,
      sorry,
    end,
  suffices h' : veq X Y g' f', from valley_equiv_trans X Y h‚ÇÅ h',
  use g', use ùüô g'.obj.as, use ùüô g'.obj.as, 
  simp,
  have heq‚ÇÅ : g'.f = (ùüô X.as ‚â´ f'.f), from rfl,
  have heq‚ÇÇ : g'.s = (f'.s ‚â´ ùüô f'.obj.as), from rfl,
  rw [heq‚ÇÅ, heq‚ÇÇ],
  have h‚ÇÅ : ùüô g'.obj.as = ùüô f'.obj.as, from rfl,
  rw h‚ÇÅ,
  simp,
end

-- We don't need this here
def modify_ore {X Y Z W A‚ÇÅ A‚ÇÇ : C} (data : @ore_data C _ S X Y Z) 
  {s : A‚ÇÅ ‚ü∂ A‚ÇÇ} (hs : S s) (g‚ÇÅ : A‚ÇÇ ‚ü∂ Y) (g‚ÇÇ : A‚ÇÇ ‚ü∂ Z) (hc : s ‚â´ g‚ÇÇ ‚â´ data.f‚ÇÇ = s ‚â´ g‚ÇÅ ‚â´ data.s‚ÇÇ) : 
  ‚àÉ (d' : @ore_data C _ S X Y Z), g‚ÇÇ ‚â´ d'.f‚ÇÇ = g‚ÇÅ ‚â´ d'.s‚ÇÇ := 
sorry

lemma assoc_out {W X Y Z : left_calculus C M} (a : valley W X) (b : valley X Y) (c : valley Y Z) :
  veq W Z (comp_valley (comp_valley a b) c) (comp_valley a (comp_valley b c)) :=
let lassoc := (comp_valley (comp_valley a b) c),
    rassoc := (comp_valley a (comp_valley b c)) in
begin
  rcases (M.ore b.f a.s a.qis) with ‚ü®Y'', f‚ÇÅ, s‚ÇÅ, hs‚ÇÅ, hc‚ÇÅ‚ü©,
  rcases (M.ore c.f b.s b.qis) with ‚ü®Z'', f‚ÇÇ, s‚ÇÇ, hs‚ÇÇ, hc‚ÇÇ‚ü©,
  rcases (M.ore f‚ÇÇ s‚ÇÅ hs‚ÇÅ)     with ‚ü®Z''', f‚ÇÉ, s‚ÇÉ, hs‚ÇÉ, hc‚ÇÉ‚ü©,

  have v : valley W Z := {
    obj := ‚ü® Z''' ‚ü©,
    f   := a.f ‚â´ f‚ÇÅ ‚â´ f‚ÇÉ,
    s   := c.s ‚â´ s‚ÇÇ ‚â´ s‚ÇÉ,
    qis  := triple_comp M ‚ü®c.qis, hs‚ÇÇ, hs‚ÇÉ‚ü©,
  },

  have heq‚ÇÅ : veq W Z lassoc v, from sorry,
  have heq‚ÇÇ : veq W Z v rassoc, from sorry,
  exact valley_equiv_trans W Z heq‚ÇÅ heq‚ÇÇ,
end

lemma assoc' {W X Y Z : left_calculus C M} (f : hom_type W X) (g : hom_type X Y) (h : hom_type Y Z) :
  comp (comp f g) h = comp f (comp g h) :=
let a := f.out,
    b := g.out,
    c := h.out in
begin
  sorry
end

-- Define the category structure

instance : category (left_calculus C M) :=
{ hom  := hom_type,
  id   := id,
  comp := Œª _ _ _ f g, comp f g,
  -- It seems like we need to prove these manually too
  id_comp' := id_comp',
  comp_id' := sorry,
  assoc' := sorry,
}

end derived

end category_theory