import cof.basic

-- In these files we define the concept of localizing a category at a
-- (left) multiplicative system.
-- The presence of conditions defining a multiplicative system mean
-- that the resulting category is much easier to work with than
-- localization through the path category.
-- See Stacks Project [Tag 04VB]

noncomputable theory

namespace category_theory

namespace derived

universe u

variables {C : Type u} [small_category C] {S : morphism_property C}

variables {M : left_mult_sys S}

-- Define the left calculus of fractions for a left multiplicative system

-- The morphisms are given by valleys, under an equivalence
structure valley (X Y : left_calculus C M) :=
  (obj : left_calculus C M)
  (f   : X.as ‚ü∂ obj.as)
  (s   : Y.as ‚ü∂ obj.as)
  (qis : S s)

-- Define the equivalence

def veq (X Y : left_calculus C M) (v‚ÇÅ v‚ÇÇ : valley X Y) : Prop :=
  ‚àÉ v‚ÇÉ : valley X Y, ‚àÉ u‚ÇÅ : v‚ÇÅ.obj.as ‚ü∂ v‚ÇÉ.obj.as, ‚àÉ u‚ÇÇ : v‚ÇÇ.obj.as ‚ü∂ v‚ÇÉ.obj.as, 
    (v‚ÇÅ.f ‚â´ u‚ÇÅ) = v‚ÇÉ.f ‚àß (v‚ÇÅ.s ‚â´ u‚ÇÅ) = v‚ÇÉ.s ‚àß 
    (v‚ÇÇ.f ‚â´ u‚ÇÇ) = v‚ÇÉ.f ‚àß (v‚ÇÇ.s ‚â´ u‚ÇÇ) = v‚ÇÉ.s

lemma valley_equiv_refl (X Y : left_calculus C M) : reflexive (veq X Y) :=
  Œª v, ‚ü® v, ùüô v.obj.as, ùüô v.obj.as, by simp, by simp, by simp, by simp ‚ü©

lemma valley_equiv_symm (X Y : left_calculus C M) : symmetric (veq X Y) :=
Œª v w h, let ‚ü®u, ‚ü® f, g, comm‚ÇÅ, comm‚ÇÇ, comm‚ÇÉ, comm‚ÇÑ ‚ü© ‚ü© := h in
  ‚ü® u, g, f, comm‚ÇÉ, comm‚ÇÑ, comm‚ÇÅ, comm‚ÇÇ ‚ü©

-- We show transitivity using the notion of "dominance"
-- It is just an aid to break the proof down into smaller chunks

def valley_dom {M : left_mult_sys S} {X Y : left_calculus C M} (v‚ÇÅ v‚ÇÇ : valley X Y) : Prop :=
  ‚àÉ a : v‚ÇÅ.obj.as ‚ü∂ v‚ÇÇ.obj.as, v‚ÇÅ.f ‚â´ a = v‚ÇÇ.f ‚àß v‚ÇÅ.s ‚â´ a = v‚ÇÇ.s

notation a ` E ` b := valley_dom a b

-- Equivalence of valleys is equivalent to dominating a common valley 
lemma dom_iff_equiv {X Y : left_calculus C M} (u v : valley X Y) : 
  (‚àÉ w : valley X Y, (u E w) ‚àß (v E w)) ‚Üî veq X Y u v :=
begin
  split,
    rintro ‚ü® w, h‚ÇÅ, h‚ÇÇ ‚ü©,
    rcases h‚ÇÅ with ‚ü® f, h‚ÇÅ' ‚ü©,
    rcases h‚ÇÇ with ‚ü® g, h‚ÇÇ' ‚ü©,
    use w.obj.as, use w.f, use w.s, use w.qis, use f, use g,
    exact ‚ü® h‚ÇÅ'.left, h‚ÇÅ'.right, h‚ÇÇ' ‚ü©,

    rintro ‚ü® w, f, g, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ, h‚ÇÑ ‚ü©,
    use w,
    split,
      exact ‚ü®f, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©,
      exact ‚ü®g, ‚ü®h‚ÇÉ, h‚ÇÑ‚ü©‚ü©
end


lemma triple_comp {W X Y Z : C} (M : left_mult_sys S) {f‚ÇÅ : W ‚ü∂ X} {f‚ÇÇ : X ‚ü∂ Y} {f‚ÇÉ : Y ‚ü∂ Z} :
  S f‚ÇÅ ‚àß S f‚ÇÇ ‚àß S f‚ÇÉ ‚Üí S (f‚ÇÅ ‚â´ f‚ÇÇ ‚â´ f‚ÇÉ) := 
begin
  rintro ‚ü® s‚ÇÅ, s‚ÇÇ, s‚ÇÉ ‚ü©,
  have s‚ÇÑ : S (f‚ÇÇ ‚â´ f‚ÇÉ) := M.comp ‚ü®s‚ÇÇ, s‚ÇÉ‚ü©,
  exact M.comp ‚ü®s‚ÇÅ, s‚ÇÑ‚ü©  
end

-- If both u and v are dominated by some w, then they are equivalent valleys
lemma mut_dom_implies_equiv {X Y : left_calculus C M} (u v : valley X Y) : 
  (‚àÉ w : valley X Y, (w E u) ‚àß (w E v)) ‚Üí veq X Y u v :=
begin
  intro h,
  rcases h with ‚ü® w, hwu, hwv ‚ü©,
  rcases hwu with ‚ü® a, ha ‚ü©,
  rcases hwv with ‚ü® b, hb ‚ü©,
  have hore : _, from M.ore v.s u.s u.qis,
  rcases hore with ‚ü® Z‚ÇÅ, c‚ÇÅ, s‚ÇÅ, hc‚ÇÅ, hcomm‚ÇÅ ‚ü©,
  
  have hcancel : w.s ‚â´ b ‚â´ s‚ÇÅ = w.s ‚â´ a ‚â´ c‚ÇÅ, by {
    rw [‚Üêhb.right, ‚Üêha.right] at hcomm‚ÇÅ,
    simp at hcomm‚ÇÅ,
    exact hcomm‚ÇÅ },
  have ht : _ := M.cancel ‚ü®w.qis, hcancel‚ü©,
  rcases ht with ‚ü® Z‚ÇÇ, t, ht‚ÇÅ, ht‚ÇÇ ‚ü©,

  use Z‚ÇÇ, use u.f ‚â´ c‚ÇÅ ‚â´ t, use v.s ‚â´ s‚ÇÅ ‚â´ t,
  exact triple_comp M ‚ü®v.qis, hc‚ÇÅ, ht‚ÇÅ‚ü©,

  use c‚ÇÅ ‚â´ t,
  use s‚ÇÅ ‚â´ t,
  
  split, { simp },
  split,
    { 
      suffices heq : u.s ‚â´ c‚ÇÅ ‚â´ t = v.s ‚â´ s‚ÇÅ ‚â´ t, from 
        begin
          simp, exact heq,
        end,
      have heq' : (u.s ‚â´ c‚ÇÅ) ‚â´ t = (v.s ‚â´ s‚ÇÅ) ‚â´ t, by rw hcomm‚ÇÅ,
      simp at heq', assumption,
    },
  split,
    { 
      simp,
      rw [‚Üêhb.left, ‚Üêha.left],
      simp,
      simp at ht‚ÇÇ,
      rw ht‚ÇÇ
    },
    { simp }
end

lemma valley_equiv_trans (X Y : left_calculus C M) : transitive (veq X Y) :=
begin
  intros u v w,
  rintro ‚ü®v‚ÇÅ, ‚ü®auv, a, i, j, k, l‚ü©‚ü©, 
  rintro ‚ü®v‚ÇÇ, ‚ü®b, avw, i', j', k', l'‚ü©‚ü©,
  have elem' : ‚àÉ x, (x E v‚ÇÅ) ‚àß (x E v‚ÇÇ), from begin
    use v,
    have velem‚ÇÅ : (v E v‚ÇÅ), from ‚ü® a, ‚ü® k, l ‚ü© ‚ü©,
    have velem‚ÇÇ : (v E v‚ÇÇ), from ‚ü® b, ‚ü® i', j' ‚ü© ‚ü©,
    exact ‚ü® velem‚ÇÅ, velem‚ÇÇ ‚ü©,
  end,
  have equiv : veq X Y v‚ÇÅ v‚ÇÇ, from (mut_dom_implies_equiv v‚ÇÅ v‚ÇÇ) elem',
  have equiv' : ‚àÉ x, (u E x) ‚àß (w E x), from 
    begin
      rcases equiv with ‚ü® z, u‚ÇÅ, u‚ÇÇ, hequiv ‚ü©,
      use z,
      split,
      { rw [‚Üê i, ‚Üê j ] at hequiv,
        simp at hequiv,
        rcases hequiv with ‚ü® ha, hb, _ ‚ü©,
        exact ‚ü®auv ‚â´ u‚ÇÅ, ‚ü® ha, hb‚ü© ‚ü© },
      { rw [‚Üê k', ‚Üê l'] at hequiv,
        simp at hequiv,
        rcases hequiv with ‚ü® _, _, ha, hb ‚ü©,
        exact ‚ü® avw ‚â´ u‚ÇÇ, ‚ü® ha, hb ‚ü©‚ü© }
    end, 
  exact (dom_iff_equiv u w).mp equiv',
end

def valley_setoid (X Y : left_calculus C M) : setoid (valley X Y) :=
  { r := veq X Y,
    iseqv := ‚ü® valley_equiv_refl X Y, valley_equiv_symm X Y, valley_equiv_trans X Y ‚ü©
  }
attribute [instance] valley_setoid

end derived

end category_theory