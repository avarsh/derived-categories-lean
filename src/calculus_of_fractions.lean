import category_theory.morphism_property

-- In this file we define the concept of localizing a category at a
-- (left) multiplicative system.
-- The presence of conditions defining a multiplicative system mean
-- that the resulting category is much easier to work with than
-- localization through the path category.
-- See Stacks Project [Tag 04VB]

noncomputable theory

namespace category_theory

namespace derived

universe u

variables {C : Type u} [small_category C] {S : morphism_property C}

-- Define a left multiplicative system for a morphism property S
structure left_mult_sys (S : morphism_property C) :=
  (id     : ‚àÄ {X : C}, S (ùüô X))
  (comp   : ‚àÄ {X Y Z : C}, ‚àÄ f : X ‚ü∂ Y, ‚àÄ g : Y ‚ü∂ Z, S f ‚àß S g ‚Üí S ( f ‚â´ g ))
  (ore    : ‚àÄ {X Y Z : C}, ‚àÄ g : X ‚ü∂ Y, ‚àÄ t : X ‚ü∂ Z, S t ‚Üí
            ‚àÉ W : C, ‚àÉ f : Z ‚ü∂ W, ‚àÉ s : Y  ‚ü∂ W, S s ‚àß (g ‚â´ s) = (t ‚â´ f))
  (cancel : ‚àÄ {X Y Z : C}, ‚àÄ f g : X ‚ü∂ Y, ‚àÄ t : Z ‚ü∂ X, S t ‚àß (t ‚â´ f) = (t ‚â´ g) ‚Üí
            ‚àÉ W : C, ‚àÉ s : Y ‚ü∂ W, S s ‚àß (f ‚â´ s) = (g ‚â´ s))

variables {M : left_mult_sys S}

lemma triple_comp {W X Y Z : C} (M : left_mult_sys S) (f‚ÇÅ : W ‚ü∂ X) (f‚ÇÇ : X ‚ü∂ Y) (f‚ÇÉ : Y ‚ü∂ Z) :
  S f‚ÇÅ ‚àß S f‚ÇÇ ‚àß S f‚ÇÉ ‚Üí S (f‚ÇÅ ‚â´ f‚ÇÇ ‚â´ f‚ÇÉ) := 
begin
  rintro ‚ü® s‚ÇÅ, s‚ÇÇ, s‚ÇÉ ‚ü©,
  have s‚ÇÑ : S (f‚ÇÇ ‚â´ f‚ÇÉ) := M.comp f‚ÇÇ f‚ÇÉ ‚ü®s‚ÇÇ, s‚ÇÉ‚ü©,
  exact M.comp f‚ÇÅ (f‚ÇÇ ‚â´ f‚ÇÉ) ‚ü®s‚ÇÅ, s‚ÇÑ‚ü©  
end

-- Wrap the objects of C into a new category
@[ext]
structure left_calculus 
  (C : Type u) [small_category C]
  (M : left_mult_sys S) := 
(as : C)


-- Define the left calculus of fractions for a lwft multiplicative system

-- The morphisms are given by valleys, under an equivalence
structure valley (X Y : left_calculus C M) :=
  (obj : left_calculus C M)
  (f   : X.as ‚ü∂ obj.as)
  (s   : Y.as ‚ü∂ obj.as)
  (qis : S s)

-- Define the equivalence

def veq (X Y : left_calculus C M) (v‚ÇÅ v‚ÇÇ : valley X Y) : Prop :=
  ‚àÉ v‚ÇÉ : valley X Y, ‚àÉ u‚ÇÅ : v‚ÇÅ.obj.as ‚ü∂ v‚ÇÉ.obj.as, ‚àÉ u‚ÇÇ : v‚ÇÇ.obj.as ‚ü∂ v‚ÇÉ.obj.as, 
    (v‚ÇÅ.f ‚â´ u‚ÇÅ) = v‚ÇÉ.f ‚àß (v‚ÇÅ.s ‚â´ u‚ÇÅ) = v‚ÇÉ.s ‚àß 
    (v‚ÇÇ.f ‚â´ u‚ÇÇ) = v‚ÇÉ.f ‚àß (v‚ÇÇ.s ‚â´ u‚ÇÇ) = v‚ÇÉ.s

lemma valley_equiv_refl (X Y : left_calculus C M) : reflexive (veq X Y) :=
  Œª v, ‚ü® v, ùüô v.obj.as, ùüô v.obj.as, by simp, by simp, by simp, by simp ‚ü©

lemma valley_equiv_symm (X Y : left_calculus C M) : symmetric (veq X Y) :=
Œª v w h, let ‚ü®u, ‚ü® f, g, comm‚ÇÅ, comm‚ÇÇ, comm‚ÇÉ, comm‚ÇÑ ‚ü© ‚ü© := h in
  ‚ü® u, g, f, comm‚ÇÉ, comm‚ÇÑ, comm‚ÇÅ, comm‚ÇÇ ‚ü©

-- We show transitivity using the notion of "dominance"
-- It is just an aid to break the proof down into smaller chunks

def valley_dom {M : left_mult_sys S} {X Y : left_calculus C M} (v‚ÇÅ v‚ÇÇ : valley X Y) : Prop :=
  ‚àÉ a : v‚ÇÅ.obj.as ‚ü∂ v‚ÇÇ.obj.as, v‚ÇÅ.f ‚â´ a = v‚ÇÇ.f ‚àß v‚ÇÅ.s ‚â´ a = v‚ÇÇ.s

notation a ` E ` b := valley_dom a b

-- Equivalence of valleys is equivalent to dominating a common valley 
lemma dom_iff_equiv {X Y : left_calculus C M} (u v : valley X Y) : 
  (‚àÉ w : valley X Y, (u E w) ‚àß (v E w)) ‚Üî veq X Y u v :=
begin
  split,
    rintro ‚ü® w, h‚ÇÅ, h‚ÇÇ ‚ü©,
    rcases h‚ÇÅ with ‚ü® f, h‚ÇÅ' ‚ü©,
    rcases h‚ÇÇ with ‚ü® g, h‚ÇÇ' ‚ü©,
    use w.obj.as, use w.f, use w.s, use w.qis, use f, use g,
    exact ‚ü® h‚ÇÅ'.left, h‚ÇÅ'.right, h‚ÇÇ' ‚ü©,

    rintro ‚ü® w, f, g, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ, h‚ÇÑ ‚ü©,
    use w,
    split,
      exact ‚ü®f, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©,
      exact ‚ü®g, ‚ü®h‚ÇÉ, h‚ÇÑ‚ü©‚ü©
end

-- If both u and v are dominated by some w, then they are equivalent valleys
lemma mut_dom_implies_equiv {X Y : left_calculus C M} (u v : valley X Y) : 
  (‚àÉ w : valley X Y, (w E u) ‚àß (w E v)) ‚Üí veq X Y u v :=
begin
  intro h,
  rcases h with ‚ü® w, hwu, hwv ‚ü©,
  rcases hwu with ‚ü® a, ha ‚ü©,
  rcases hwv with ‚ü® b, hb ‚ü©,
  have hore : _, from M.ore v.s u.s u.qis,
  rcases hore with ‚ü® Z‚ÇÅ, c‚ÇÅ, s‚ÇÅ, hc‚ÇÅ, hcomm‚ÇÅ ‚ü©,
  
  have hcancel : w.s ‚â´ b ‚â´ s‚ÇÅ = w.s ‚â´ a ‚â´ c‚ÇÅ, by {
    rw [‚Üêhb.right, ‚Üêha.right] at hcomm‚ÇÅ,
    simp at hcomm‚ÇÅ,
    exact hcomm‚ÇÅ },
  have ht : _ := M.cancel (b ‚â´ s‚ÇÅ) (a ‚â´ c‚ÇÅ) w.s ‚ü®w.qis, hcancel‚ü©,
  rcases ht with ‚ü® Z‚ÇÇ, t, ht‚ÇÅ, ht‚ÇÇ ‚ü©,

  use Z‚ÇÇ, use u.f ‚â´ c‚ÇÅ ‚â´ t, use v.s ‚â´ s‚ÇÅ ‚â´ t,
  exact triple_comp M v.s s‚ÇÅ t ‚ü®v.qis, hc‚ÇÅ, ht‚ÇÅ‚ü©,

  use c‚ÇÅ ‚â´ t,
  use s‚ÇÅ ‚â´ t,
  
  split, { simp },
  split,
    { 
      suffices heq : u.s ‚â´ c‚ÇÅ ‚â´ t = v.s ‚â´ s‚ÇÅ ‚â´ t, from 
        begin
          simp, exact heq,
        end,
      have heq' : (u.s ‚â´ c‚ÇÅ) ‚â´ t = (v.s ‚â´ s‚ÇÅ) ‚â´ t, by rw hcomm‚ÇÅ,
      simp at heq', assumption,
    },
  split,
    { 
      simp,
      rw [‚Üêhb.left, ‚Üêha.left],
      simp,
      simp at ht‚ÇÇ,
      rw ht‚ÇÇ
    },
    { simp }
end

lemma valley_equiv_trans (X Y : left_calculus C M) : transitive (veq X Y) :=
begin
  intros u v w huv hvw,
  rcases huv with ‚ü® v‚ÇÅ, ‚ü®auv, a, i, j, k, l ‚ü© ‚ü©,  
  rcases hvw with ‚ü® v‚ÇÇ, ‚ü®b, avw, i', j', k', l' ‚ü© ‚ü©,  
  have uelem : (u E v‚ÇÅ), from ‚ü® auv, ‚ü® i, j ‚ü© ‚ü©,
  have welem : (w E v‚ÇÇ), from ‚ü® avw, ‚ü® k', l' ‚ü© ‚ü© ,
  have elem' : ‚àÉ x, (x E v‚ÇÅ) ‚àß (x E v‚ÇÇ), from begin
    use v,
    have velem‚ÇÅ : (v E v‚ÇÅ), from ‚ü® a, ‚ü® k, l ‚ü© ‚ü©,
    have velem‚ÇÇ : (v E v‚ÇÇ), from ‚ü® b, ‚ü® i', j' ‚ü© ‚ü©,
    exact ‚ü® velem‚ÇÅ, velem‚ÇÇ ‚ü©,
  end,
  have equiv : veq X Y v‚ÇÅ v‚ÇÇ, from (mut_dom_implies_equiv v‚ÇÅ v‚ÇÇ) elem',
  have equiv' : ‚àÉ x, (u E x) ‚àß (w E x), from 
    begin
      rcases equiv with ‚ü® z, u‚ÇÅ, u‚ÇÇ, hequiv ‚ü©,
      use z,
      split,
      { rw [‚Üê i, ‚Üê j ] at hequiv,
        simp at hequiv,
        rcases hequiv with ‚ü® ha, hb, _ ‚ü©,
        exact ‚ü®auv ‚â´ u‚ÇÅ, ‚ü® ha, hb‚ü© ‚ü© },
      { rw [‚Üê k', ‚Üê l'] at hequiv,
        simp at hequiv,
        rcases hequiv with ‚ü® _, _, ha, hb ‚ü©,
        exact ‚ü® avw ‚â´ u‚ÇÇ, ‚ü® ha, hb ‚ü©‚ü© }
    end, 
  exact (dom_iff_equiv u w).mp equiv',
end

def valley_setoid (X Y : left_calculus C M) : setoid (valley X Y) :=
  { r := veq X Y,
    iseqv := ‚ü® valley_equiv_refl X Y, valley_equiv_symm X Y, valley_equiv_trans X Y ‚ü©
  }
attribute [instance] valley_setoid


-- Define the identity and composition of valleys

def id_valley (X : left_calculus C M) : valley X X :=
{ obj := X,
  f   := ùüô X.as,
  s   := ùüô X.as,
  qis := M.id }

-- Mathematically we should check that the composition doesn't depend on
-- the choices we make, once we pass to the equivalence relation.
-- I'm not sure when we need to prove this here though!

structure comp_data {X Y Z : left_calculus C M} (v‚ÇÅ : valley X Y) (v‚ÇÇ : valley Y Z) :=
  (W    : C) 
  (h    : v‚ÇÅ.obj.as ‚ü∂ W) 
  (u    : v‚ÇÇ.obj.as ‚ü∂ W) 
  (hu   : S u)
  (comm : v‚ÇÇ.f ‚â´ u = v‚ÇÅ.s ‚â´ h)

-- The Ore condition gives us composition data automatically
def data_from_ore {X Y Z : left_calculus C M} {v‚ÇÅ : valley X Y} {v‚ÇÇ : valley Y Z} : comp_data v‚ÇÅ v‚ÇÇ :=
let Y' := v‚ÇÅ.obj, Z' := v‚ÇÇ.obj in
  have hyp : _ :=
    M.ore v‚ÇÇ.f v‚ÇÅ.s v‚ÇÅ.qis,
  let Z'' := classical.some hyp in
  have hyp‚ÇÅ : ‚àÉ (f : Y'.as ‚ü∂ Z'') (s : Z'.as ‚ü∂ Z''), S s ‚àß v‚ÇÇ.f ‚â´ s = v‚ÇÅ.s ‚â´ f := 
    classical.some_spec hyp,
  let h := classical.some hyp‚ÇÅ in
  have hyp‚ÇÇ : ‚àÉ (s : Z'.as ‚ü∂ Z''), S s ‚àß v‚ÇÇ.f ‚â´ s = v‚ÇÅ.s ‚â´ h := 
    classical.some_spec hyp‚ÇÅ,
  let u := classical.some hyp‚ÇÇ in
  have hyp‚ÇÉ : S u ‚àß v‚ÇÇ.f ‚â´ u = v‚ÇÅ.s ‚â´ h := (classical.some_spec hyp‚ÇÇ),
  { W    := Z'',
    h    := h,
    u    := u,
    hu   := hyp‚ÇÉ.left,
    comm := hyp‚ÇÉ.right }

def comp_valley_from_data {X Y Z : left_calculus C M} 
    (v‚ÇÅ : valley X Y) (v‚ÇÇ : valley Y Z) (data : comp_data v‚ÇÅ v‚ÇÇ)
  : valley X Z :=
  { obj := ‚ü® data.W ‚ü©,
    f   := v‚ÇÅ.f ‚â´ data.h,
    s   := v‚ÇÇ.s ‚â´ data.u,
    qis := M.comp v‚ÇÇ.s data.u ‚ü®v‚ÇÇ.qis, data.hu‚ü© }

-- As a default, we can always define composition using the Ore data
def comp_valley {X Y Z : left_calculus C M} (v‚ÇÅ : valley X Y) (v‚ÇÇ : valley Y Z) : valley X Z :=
  comp_valley_from_data v‚ÇÅ v‚ÇÇ data_from_ore

-- Composition is well defined under the equivalence relation

lemma comp_independent_of_data {X Y Z : left_calculus C M} (v‚ÇÅ : valley X Y) (v‚ÇÇ : valley Y Z) (d‚ÇÅ d‚ÇÇ : comp_data v‚ÇÅ v‚ÇÇ) :
  ‚ü¶ comp_valley_from_data v‚ÇÅ v‚ÇÇ d‚ÇÅ ‚üß = ‚ü¶ comp_valley_from_data v‚ÇÅ v‚ÇÇ d‚ÇÇ ‚üß  :=
begin
  sorry
end

lemma comp_well_def {X Y Z : left_calculus C M}  (v‚ÇÅ v‚ÇÅ' : valley X Y) (v‚ÇÇ v‚ÇÇ' : valley Y Z) :
  ‚ü¶ v‚ÇÅ ‚üß = ‚ü¶ v‚ÇÅ' ‚üß ‚àß ‚ü¶ v‚ÇÇ ‚üß = ‚ü¶ v‚ÇÇ' ‚üß ‚Üí ‚ü¶ comp_valley v‚ÇÅ v‚ÇÇ ‚üß = ‚ü¶ comp_valley v‚ÇÅ' v‚ÇÇ' ‚üß := 
begin
  rintro ‚ü® h‚ÇÅ, h‚ÇÇ ‚ü©,
  sorry,
end

-- The axioms for the category

def hom_type (X Y : left_calculus C M) := quotient (valley_setoid X Y)

def id (X : left_calculus C M) := ‚ü¶ id_valley X ‚üß

def comp {X Y Z : left_calculus C M} (f : hom_type X Y) (g : hom_type Y Z) := 
  ‚ü¶ comp_valley (quotient.out f) (quotient.out g) ‚üß
  

lemma id_comp' (X Y : left_calculus C M) (f :hom_type X Y) :
  comp (id X) f = f :=
let g  := comp (id X) f,
    f' := f.out,
    data : comp_data (id_valley X) f' :=
      { W := f'.obj.as,
        h := f'.f,
        u := (ùüô f'.obj.as),
        hu := M.id,
        comm := have h : (id_valley X).s = ùüô X.as, from rfl,
          by {simp, rw h, simp},
      },
    g' := comp_valley_from_data (id_valley X) f.out data in
begin
  suffices hlift : veq X Y g.out f', from begin
      apply quotient.out_equiv_out.mp,
      exact hlift,
    end,
  have h‚ÇÅ : veq X Y g.out g', from begin
      suffices heq : g = ‚ü¶g'‚üß, from begin 
        have hout : veq X Y g.out (‚ü¶g'‚üß.out), from quotient.out_equiv_out.mpr heq,
        have hout' : veq X Y ‚ü¶g'‚üß.out g', from quotient.mk_out g',
        exact valley_equiv_trans X Y hout hout',
      end,
      -- We will need to apply both comp_independent_of_data
      -- and comp_well_def here.
      sorry,
    end,
  suffices h' : veq X Y g' f', from valley_equiv_trans X Y h‚ÇÅ h',
  use g', use ùüô g'.obj.as, use ùüô g'.obj.as, 
  simp,
  have heq‚ÇÅ : g'.f = (ùüô X.as ‚â´ f'.f), from rfl,
  have heq‚ÇÇ : g'.s = (f'.s ‚â´ ùüô f'.obj.as), from rfl,
  rw [heq‚ÇÅ, heq‚ÇÇ],
  have h‚ÇÅ : ùüô g'.obj.as = ùüô f'.obj.as, from rfl,
  rw h‚ÇÅ,
  simp,
end

-- Define the category structure

-- Question about choice: I'm defining a category where the morphisms are
-- some structure under an equivalence relation. When defining composition,
-- there's a bunch of choices which are made, but the quivalence class
-- of the composition is independent of these choices. 
-- It looks like the only place where I need this independence is when
-- proving id_comp', comp_id' and assoc'. Is this enough? Shouldn't I have to prove 
-- it at the point where composition is even defined, i.e. while taking the quotient?

instance : category (left_calculus C M) :=
{ hom  := hom_type,
  id   := id,
  comp := Œª _ _ _ f g, comp f g,
  -- It seems like we need to prove these manually too
  id_comp' := id_comp',
  comp_id' := sorry,
  assoc' := sorry,
}

end derived

end category_theory