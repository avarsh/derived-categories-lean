import category_theory.morphism_property

-- In this file we define the concept of a Verdier localization.
-- The presence of conditions defining a multiplicative system mean
-- that the resulting category is much easier to work with.
-- See Stacks Project [Tag 04VB]

noncomputable theory

namespace category_theory

namespace verdier

universe u

variables {C : Type u} [small_category C] {S : morphism_property C}

-- Define a left multiplicative system for a morphism property S
structure left_mult_sys (S : morphism_property C) :=
  (id     : ‚àÄ X : C, S (ùüô X))
  (comp   : ‚àÄ X Y Z : C, ‚àÄ f : X ‚ü∂ Y, ‚àÄ g : Y ‚ü∂ Z, S f ‚àß S g ‚Üí S ( f ‚â´ g ))
  (ore    : ‚àÄ X Y Z : C, ‚àÄ g : X ‚ü∂ Y, ‚àÄ t : X ‚ü∂ Z, S t ‚Üí
            ‚àÉ W : C, ‚àÉ f : Z ‚ü∂ W, ‚àÉ s : Y  ‚ü∂ W, S s ‚àß (g ‚â´ s) = (t ‚â´ f))
  (cancel : ‚àÄ X Y Z : C, ‚àÄ f g : X ‚ü∂ Y, ‚àÄ t : Z ‚ü∂ X, S t ‚àß (t ‚â´ f) = (t ‚â´ g) ‚Üí
            ‚àÉ W : C, ‚àÉ s : Y ‚ü∂ W, S s ‚àß (f ‚â´ s) = (g ‚â´ s))

variables (M : left_mult_sys S)

-- Wrap the objects of C into a new category
@[ext]
structure left_calculus 
  (C : Type u) [small_category C]
  (M : left_mult_sys S) := 
(as : C)


-- Define the left calculus of fractions for a right multiplicative system

-- The morphisms are given by valleys, under an equivalence
structure valley (X Y : left_calculus C M) :=
  (obj : left_calculus C M)
  (f   : X.as ‚ü∂ obj.as)
  (s   : Y.as ‚ü∂ obj.as)
  (qis : S s)

-- Define the equivalence

def valley_equiv (X Y : left_calculus C M) (v‚ÇÅ v‚ÇÇ : valley M X Y) : Prop :=
  ‚àÉ v‚ÇÉ : valley M X Y, ‚àÉ u‚ÇÅ : v‚ÇÅ.obj.as ‚ü∂ v‚ÇÉ.obj.as, ‚àÉ u‚ÇÇ : v‚ÇÇ.obj.as ‚ü∂ v‚ÇÉ.obj.as, 
    (v‚ÇÅ.f ‚â´ u‚ÇÅ) = v‚ÇÉ.f ‚àß (v‚ÇÅ.s ‚â´ u‚ÇÅ) = v‚ÇÉ.s ‚àß 
    (v‚ÇÇ.f ‚â´ u‚ÇÇ) = v‚ÇÉ.f ‚àß (v‚ÇÇ.s ‚â´ u‚ÇÇ) = v‚ÇÉ.s

lemma valley_equiv_refl (X Y : left_calculus C M) : reflexive (valley_equiv M X Y) :=
  Œª v, ‚ü® v, ùüô v.obj.as, ùüô v.obj.as, by simp, by simp, by simp, by simp ‚ü©

lemma valley_equiv_symm (X Y : left_calculus C M) : symmetric (valley_equiv M X Y) :=
Œª v w h, let ‚ü®u, ‚ü® f, g, comm‚ÇÅ, comm‚ÇÇ, comm‚ÇÉ, comm‚ÇÑ ‚ü© ‚ü© := h in
  ‚ü® u, g, f, comm‚ÇÉ, comm‚ÇÑ, comm‚ÇÅ, comm‚ÇÇ ‚ü©

def valley_elem_equiv (X Y : left_calculus C M) (v‚ÇÅ v‚ÇÇ : valley M X Y) : Prop :=
  ‚àÉ a : v‚ÇÅ.obj.as ‚ü∂ v‚ÇÇ.obj.as, v‚ÇÅ.f ‚â´ a = v‚ÇÇ.f ‚àß v‚ÇÅ.s ‚â´ a = v‚ÇÇ.s
 
lemma valley_elem_equiv_refl (X Y : left_calculus C M) : reflexive (valley_elem_equiv M X Y) :=
begin
  intro u,
  use (ùüô u.obj.as),
  simp,
end

lemma valley_elem_equiv_trans (X Y : left_calculus C M) : transitive (valley_elem_equiv M X Y) :=
begin
  intros u v w huv huw,
  rcases huv with ‚ü® a‚ÇÅ, h‚ÇÅ ‚ü©,
  rcases huw with ‚ü® a‚ÇÇ, h‚ÇÇ ‚ü©,
  use a‚ÇÅ ‚â´ a‚ÇÇ,
  split,
  { rw ‚Üê(h‚ÇÅ.left) at h‚ÇÇ,
    simp at h‚ÇÇ,
    exact h‚ÇÇ.left },
  { rw ‚Üê(h‚ÇÅ.right) at h‚ÇÇ,
    simp at h‚ÇÇ,
    exact h‚ÇÇ.right }
end

-- failed attempt
lemma valley_equiv_trans (X Y : left_calculus C M) : transitive (valley_equiv M X Y) :=
begin
  intros u v w huv hvw,
  rcases huv with ‚ü® v‚ÇÅ, ‚ü®f‚ÇÅ, g‚ÇÅ, _, _ , _, _ ‚ü© ‚ü©,  
  rcases hvw with ‚ü® v‚ÇÇ, ‚ü®f‚ÇÇ, g‚ÇÇ, _, _ , _, _ ‚ü© ‚ü©,  
  have ore‚ÇÅ : _, from M.ore Y.as v.obj.as u.obj.as v.s u.s u.qis,
  rcases ore‚ÇÅ with ‚ü® Z', f', s', ‚ü® qis‚ÇÅ, _ ‚ü© ‚ü©,
  have ore‚ÇÇ : _, from M.ore Y.as v.obj.as w.obj.as v.s w.s w.qis,
  rcases ore‚ÇÇ with ‚ü® Z'', f'', s'', ‚ü® qis‚ÇÇ, _ ‚ü©‚ü©,
  have ore‚ÇÉ : _, from M.ore v.obj.as Z' Z'' s' s'' qis‚ÇÇ,
  rcases ore‚ÇÉ with ‚ü® W, f‚ÇÉ, s_w, ‚ü® qis‚ÇÉ, _ ‚ü© ‚ü©,
  use W,
  use w.f ‚â´ f'' ‚â´ f‚ÇÉ,
  use v.s ‚â´ s' ‚â´ s_w,
  simp,
  have qis_comp : S (s' ‚â´ s_w), from M.comp _ _ _ s' s_w ‚ü®qis‚ÇÅ, qis‚ÇÉ‚ü©,
  exact M.comp _ _ _ v.s (s' ‚â´ s_w) ‚ü®v.qis, qis_comp‚ü©,
  simp,
  use (f' ‚â´ s_w),
  split,
  sorry,
end

instance (X Y : left_calculus C M) : setoid (valley M X Y) :=
  { r := valley_equiv M X Y,
    iseqv := ‚ü® valley_equiv_refl M X Y, valley_equiv_symm M X Y, valley_equiv_trans M X Y ‚ü©
  }

def id_valley (X : left_calculus C M) : valley M X X :=
{ obj := X,
  f   := ùüô X.as,
  s   := ùüô X.as,
  qis := M.id X.as }


def comp_valley (X Y Z : left_calculus C M) (v‚ÇÅ : valley M X Y) (v‚ÇÇ : valley M Y Z) : valley M X Z :=
let Y' := v‚ÇÅ.obj, Z' := v‚ÇÇ.obj in
have hyp : _ :=
  M.ore Y.as Z'.as Y'.as v‚ÇÇ.f v‚ÇÅ.s v‚ÇÅ.qis,
let Z'' := classical.some hyp in
have hyp‚ÇÅ : ‚àÉ (f : Y'.as ‚ü∂ Z'') (s : Z'.as ‚ü∂ Z''), S s ‚àß v‚ÇÇ.f ‚â´ s = v‚ÇÅ.s ‚â´ f := 
  classical.some_spec hyp,
let h := classical.some hyp‚ÇÅ in
have hyp‚ÇÇ : ‚àÉ (s : Z'.as ‚ü∂ Z''), S s ‚àß v‚ÇÇ.f ‚â´ s = v‚ÇÅ.s ‚â´ h := 
  classical.some_spec hyp‚ÇÅ,
let u := classical.some hyp‚ÇÇ in
have hyp‚ÇÉ : S u := (classical.some_spec hyp‚ÇÇ).left,
{ obj := ‚ü® Z'' ‚ü©,
  f   := v‚ÇÅ.f ‚â´ h,
  s   := v‚ÇÇ.s ‚â´ u,
  qis := have comp : _ := M.comp Z.as Z'.as Z'' v‚ÇÇ.s u, comp ‚ü®v‚ÇÇ.qis, hyp‚ÇÉ‚ü© }

instance : category (left_calculus C M) :=
{ hom  := Œª X Y, quot (valley_equiv M X Y),
  id   := Œª X, quot.mk (valley_equiv M X X) (id_valley M X),
  comp := Œª X Y Z f g, quot.mk (valley_equiv M X Z) (comp_valley M X Y Z (quot.out f) (quot.out g)),
  -- It seems like we need to prove these manually too
  id_comp' := Œª X Y f, sorry,
  comp_id' := sorry,
  assoc' := sorry,
}

end verdier

end category_theory