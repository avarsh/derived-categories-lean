import category_theory.morphism_property

-- In this file we define the concept of a Verdier localization.
-- The presence of conditions defining a multiplicative system mean
-- that the resulting category is much easier to work with.
-- See Stacks Project [Tag 04VB]

noncomputable theory

namespace category_theory

namespace derived

universe u

variables {C : Type u} [small_category C] {S : morphism_property C}

-- Define a left multiplicative system for a morphism property S
structure left_mult_sys (S : morphism_property C) :=
  (id     : ‚àÄ {X : C}, S (ùüô X))
  (comp   : ‚àÄ {X Y Z : C}, ‚àÄ f : X ‚ü∂ Y, ‚àÄ g : Y ‚ü∂ Z, S f ‚àß S g ‚Üí S ( f ‚â´ g ))
  (ore    : ‚àÄ {X Y Z : C}, ‚àÄ g : X ‚ü∂ Y, ‚àÄ t : X ‚ü∂ Z, S t ‚Üí
            ‚àÉ W : C, ‚àÉ f : Z ‚ü∂ W, ‚àÉ s : Y  ‚ü∂ W, S s ‚àß (g ‚â´ s) = (t ‚â´ f))
  (cancel : ‚àÄ {X Y Z : C}, ‚àÄ f g : X ‚ü∂ Y, ‚àÄ t : Z ‚ü∂ X, S t ‚àß (t ‚â´ f) = (t ‚â´ g) ‚Üí
            ‚àÉ W : C, ‚àÉ s : Y ‚ü∂ W, S s ‚àß (f ‚â´ s) = (g ‚â´ s))

variables {M : left_mult_sys S}

lemma triple_comp {W X Y Z : C} (f‚ÇÅ : W ‚ü∂ X) (f‚ÇÇ : X ‚ü∂ Y) (f‚ÇÉ : Y ‚ü∂ Z) :
  S f‚ÇÅ ‚àß S f‚ÇÇ ‚àß S f‚ÇÉ ‚Üí S (f‚ÇÅ ‚â´ f‚ÇÇ ‚â´ f‚ÇÉ) := sorry

-- Wrap the objects of C into a new category
@[ext]
structure left_calculus 
  (C : Type u) [small_category C]
  (M : left_mult_sys S) := 
(as : C)


-- Define the left calculus of fractions for a right multiplicative system

-- The morphisms are given by valleys, under an equivalence
structure valley (X Y : left_calculus C M) :=
  (obj : left_calculus C M)
  (f   : X.as ‚ü∂ obj.as)
  (s   : Y.as ‚ü∂ obj.as)
  (qis : S s)

-- Define the equivalence

def valley_equiv (X Y : left_calculus C M) (v‚ÇÅ v‚ÇÇ : valley X Y) : Prop :=
  ‚àÉ v‚ÇÉ : valley X Y, ‚àÉ u‚ÇÅ : v‚ÇÅ.obj.as ‚ü∂ v‚ÇÉ.obj.as, ‚àÉ u‚ÇÇ : v‚ÇÇ.obj.as ‚ü∂ v‚ÇÉ.obj.as, 
    (v‚ÇÅ.f ‚â´ u‚ÇÅ) = v‚ÇÉ.f ‚àß (v‚ÇÅ.s ‚â´ u‚ÇÅ) = v‚ÇÉ.s ‚àß 
    (v‚ÇÇ.f ‚â´ u‚ÇÇ) = v‚ÇÉ.f ‚àß (v‚ÇÇ.s ‚â´ u‚ÇÇ) = v‚ÇÉ.s

lemma valley_equiv_refl (X Y : left_calculus C M) : reflexive (valley_equiv X Y) :=
  Œª v, ‚ü® v, ùüô v.obj.as, ùüô v.obj.as, by simp, by simp, by simp, by simp ‚ü©

lemma valley_equiv_symm (X Y : left_calculus C M) : symmetric (valley_equiv X Y) :=
Œª v w h, let ‚ü®u, ‚ü® f, g, comm‚ÇÅ, comm‚ÇÇ, comm‚ÇÉ, comm‚ÇÑ ‚ü© ‚ü© := h in
  ‚ü® u, g, f, comm‚ÇÉ, comm‚ÇÑ, comm‚ÇÅ, comm‚ÇÇ ‚ü©

-- We show transitivity using the notion of an "elementary equivalence"
-- It is just an aid to break the proof down into smaller chunks

def valley_elem_equiv {M : left_mult_sys S} {X Y : left_calculus C M} (v‚ÇÅ v‚ÇÇ : valley X Y) : Prop :=
  ‚àÉ a : v‚ÇÅ.obj.as ‚ü∂ v‚ÇÇ.obj.as, v‚ÇÅ.f ‚â´ a = v‚ÇÇ.f ‚àß v‚ÇÅ.s ‚â´ a = v‚ÇÇ.s

lemma elem_implies_equiv {X Y : left_calculus C M} (u v : valley X Y) : 
  (‚àÉ w : valley X Y, valley_elem_equiv u w ‚àß valley_elem_equiv v w) ‚Üí valley_equiv X Y u v :=
begin
  rintro ‚ü® w, h‚ÇÅ, h‚ÇÇ ‚ü©,
  rcases h‚ÇÅ with ‚ü® f, h‚ÇÅ' ‚ü©,
  rcases h‚ÇÇ with ‚ü® g, h‚ÇÇ' ‚ü©,
  use w.obj.as, use w.f, use w.s, use w.qis, use f, use g,
  exact ‚ü® h‚ÇÅ'.left, h‚ÇÅ'.right, h‚ÇÇ' ‚ü©,
end

lemma dom_elem_implies_equiv {X Y : left_calculus C M} (u v : valley X Y) : 
  (‚àÉ w : valley X Y, valley_elem_equiv w u ‚àß valley_elem_equiv w v) ‚Üí 
  valley_equiv X Y u v :=
begin
  intro h,
  rcases h with ‚ü® w, hwu, hwv ‚ü©,
  rcases hwu with ‚ü® a, ha ‚ü©,
  rcases hwv with ‚ü® b, hb ‚ü©,
  have hore : _, from M.ore v.s u.s u.qis,
  rcases hore with ‚ü® Z‚ÇÅ, c‚ÇÅ, s‚ÇÅ, hc‚ÇÅ, hcomm‚ÇÅ ‚ü©,
  
  have hcancel : w.s ‚â´ b ‚â´ s‚ÇÅ = w.s ‚â´ a ‚â´ c‚ÇÅ, by {
    rw [‚Üêhb.right, ‚Üêha.right] at hcomm‚ÇÅ,
    simp at hcomm‚ÇÅ,
    exact hcomm‚ÇÅ },
  have ht : _ := M.cancel (b ‚â´ s‚ÇÅ) (a ‚â´ c‚ÇÅ) w.s ‚ü®w.qis, hcancel‚ü©,
  rcases ht with ‚ü® Z‚ÇÇ, t, ht‚ÇÅ, ht‚ÇÇ ‚ü©,

  use Z‚ÇÇ, use u.f ‚â´ c‚ÇÅ ‚â´ t, use v.s ‚â´ s‚ÇÅ ‚â´ t,
  exact triple_comp v.s s‚ÇÅ t ‚ü®v.qis, hc‚ÇÅ, ht‚ÇÅ‚ü©,

  use c‚ÇÅ ‚â´ t,
  use s‚ÇÅ ‚â´ t,
  
  split, { simp },
  split,
    { 
      suffices heq : u.s ‚â´ c‚ÇÅ ‚â´ t = v.s ‚â´ s‚ÇÅ ‚â´ t, from 
        begin
          simp, exact heq,
        end,
      have heq' : (u.s ‚â´ c‚ÇÅ) ‚â´ t = (v.s ‚â´ s‚ÇÅ) ‚â´ t, by rw hcomm‚ÇÅ,
      simp at heq', assumption,
    },
  split,
    { 
      simp,
      rw [‚Üêhb.left, ‚Üêha.left],
      simp,
      simp at ht‚ÇÇ,
      rw ht‚ÇÇ
    },
    { simp }
end

lemma valley_equiv_trans (X Y : left_calculus C M) : transitive (valley_equiv X Y) :=
begin
  intros u v w huv hvw,
  rcases huv with ‚ü® v‚ÇÅ, ‚ü®auv, a, i, j, k, l ‚ü© ‚ü©,  
  rcases hvw with ‚ü® v‚ÇÇ, ‚ü®b, avw, i', j', k', l' ‚ü© ‚ü©,  
  have uelem : valley_elem_equiv u v‚ÇÅ, from ‚ü® auv, ‚ü® i, j ‚ü© ‚ü©,
  have welem : valley_elem_equiv w v‚ÇÇ, from ‚ü® avw, ‚ü® k', l' ‚ü© ‚ü© ,
  have elem' : ‚àÉ x, valley_elem_equiv x v‚ÇÅ ‚àß valley_elem_equiv x v‚ÇÇ, from begin
    use v,
    have velem‚ÇÅ : valley_elem_equiv v v‚ÇÅ, from ‚ü® a, ‚ü® k, l ‚ü© ‚ü©,
    have velem‚ÇÇ : valley_elem_equiv v v‚ÇÇ, from ‚ü® b, ‚ü® i', j' ‚ü© ‚ü©,
    exact ‚ü® velem‚ÇÅ, velem‚ÇÇ ‚ü©,
  end,
  have equiv : valley_equiv X Y v‚ÇÅ v‚ÇÇ, from (dom_elem_implies_equiv v‚ÇÅ v‚ÇÇ) elem',
  have equiv' : ‚àÉ x, valley_elem_equiv u x ‚àß valley_elem_equiv w x, from 
    begin
      rcases equiv with ‚ü® z, u‚ÇÅ, u‚ÇÇ, hequiv ‚ü©,
      use z,
      split,
      { rw [‚Üê i, ‚Üê j ] at hequiv,
        simp at hequiv,
        rcases hequiv with ‚ü® ha, hb, _ ‚ü©,
        exact ‚ü®auv ‚â´ u‚ÇÅ, ‚ü® ha, hb‚ü© ‚ü© },
      { rw [‚Üê k', ‚Üê l'] at hequiv,
        simp at hequiv,
        rcases hequiv with ‚ü® _, _, ha, hb ‚ü©,
        exact ‚ü® avw ‚â´ u‚ÇÇ, ‚ü® ha, hb ‚ü©‚ü© }
    end, 
  exact (elem_implies_equiv u w) equiv',
end

instance (X Y : left_calculus C M) : setoid (valley X Y) :=
  { r := valley_equiv X Y,
    iseqv := ‚ü® valley_equiv_refl X Y, valley_equiv_symm X Y, valley_equiv_trans X Y ‚ü©
  }

-- Define the identity and composition of valleys

def id_valley (X : left_calculus C M) : valley X X :=
{ obj := X,
  f   := ùüô X.as,
  s   := ùüô X.as,
  qis := M.id }

def comp_valley (X Y Z : left_calculus C M) (v‚ÇÅ : valley X Y) (v‚ÇÇ : valley Y Z) : valley X Z :=
  let Y' := v‚ÇÅ.obj, Z' := v‚ÇÇ.obj in
  have hyp : _ :=
    M.ore v‚ÇÇ.f v‚ÇÅ.s v‚ÇÅ.qis,
  let Z'' := classical.some hyp in
  have hyp‚ÇÅ : ‚àÉ (f : Y'.as ‚ü∂ Z'') (s : Z'.as ‚ü∂ Z''), S s ‚àß v‚ÇÇ.f ‚â´ s = v‚ÇÅ.s ‚â´ f := 
    classical.some_spec hyp,
  let h := classical.some hyp‚ÇÅ in
  have hyp‚ÇÇ : ‚àÉ (s : Z'.as ‚ü∂ Z''), S s ‚àß v‚ÇÇ.f ‚â´ s = v‚ÇÅ.s ‚â´ h := 
    classical.some_spec hyp‚ÇÅ,
  let u := classical.some hyp‚ÇÇ in
  have hyp‚ÇÉ : S u := (classical.some_spec hyp‚ÇÇ).left,
  { obj := ‚ü® Z'' ‚ü©,
    f   := v‚ÇÅ.f ‚â´ h,
    s   := v‚ÇÇ.s ‚â´ u,
    qis := have comp : _ := M.comp v‚ÇÇ.s u, comp ‚ü®v‚ÇÇ.qis, hyp‚ÇÉ‚ü© }

-- Define the category structure

instance : category (left_calculus C M) :=
{ hom  := Œª X Y, quot (valley_equiv X Y),
  id   := Œª X, quot.mk (valley_equiv X X) (id_valley X),
  comp := Œª X Y Z f g, quot.mk (valley_equiv X Z) (comp_valley X Y Z (quot.out f) (quot.out g)),
  -- It seems like we need to prove these manually too
  id_comp' := Œª X Y f, sorry,
  comp_id' := sorry,
  assoc' := sorry,
}

end derived

end category_theory